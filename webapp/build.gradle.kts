import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
	id("org.springframework.boot") version "2.2.0.BUILD-SNAPSHOT"
	id("io.spring.dependency-management") version "1.0.8.RELEASE"
	kotlin("jvm") version "1.3.50"
	kotlin("plugin.spring") version "1.3.50"

	// https://github.com/palantir/gradle-docker
	id("com.palantir.docker") version "0.22.1" // Gradle Docker plugin
	id("com.palantir.docker-compose") version "0.22.1" // Gradle Docker Compose plugin
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_1_8

val developmentOnly by configurations.creating
configurations {
	runtimeClasspath {
		extendsFrom(developmentOnly)
	}
}

repositories {
	mavenCentral()
	maven { url = uri("https://repo.spring.io/milestone") }
	maven { url = uri("https://repo.spring.io/snapshot") }
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
	}
}

tasks.withType<Test> {
	useJUnitPlatform()
}

tasks.withType<KotlinCompile> {
	kotlinOptions {
		freeCompilerArgs = listOf("-Xjsr305=strict")
		jvmTarget = "1.8"
	}
}

// Gradle Docker plugin configuration
// Please make sure you login to Docker registry before running Docker related tasks
docker {
	// All the build process should be passed before we run Docker related tasks
	dependsOn(tasks.getByName("build"))

	val bootJar: BootJar by tasks

	// Please specify the image metadata here
	val userName = "lethe2211"
	val version = "v1"
	name = "$userName/${project.name}:$version"

	// Please add the tags if you need more registries/userNames/tags.
	// Accordingly this plugin will create a corresponding task to tag/push it.
	//
	// By default, the registry to which it will push when you run "dockerPush" task is "docker.io".
	// So practically the following are not needed.
	//
	// val registry = "docker.io"
	// tag("DockerIO", "$registry/$name")

	// Set the path to Dockerfile
	setDockerfile(file("Dockerfile"))

	// Add the built jar file to Docker's build context
	files(bootJar.archiveFile)

	// Set buildArgs of Dockerfile
	buildArgs(mapOf(
		"JAR_FILE" to bootJar.archiveFileName.get()
	))
}

// Gradle Docker Compose plugin configuration
dockerCompose {
	val bootJar: BootJar by tasks

	// Set the path to template file for docker-compose.yml (Docker Compose template)
	setTemplate("../docker-compose.yml.template")

	// Set the path to docker-compose.yml which will be generated by "generateDockerCompose" task
	setDockerComposeFile("../docker-compose.yml")

	// Specifying a key and a value here will replace "{{key}}" in Docker Compose template with the value
	templateToken("jarFile", bootJar.archiveFileName.get())
}
